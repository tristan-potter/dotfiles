'use strict';

var _index = require('./index');

var _themerColorsDefault = require('themer-colors-default');

var _layouts = require('./layouts');

var _layouts2 = _interopRequireDefault(_layouts);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const layoutCount = Object.keys(_layouts2.default).length;

describe('themer tmux color scheme generator', () => {

  const testColorSetConfiguration = (message, colors) => {
    it(message, _asyncToGenerator(function* () {
      const files = yield Promise.all((0, _index.render)(colors, {}));

      let unknownCount = 0;
      let darkCount = 0;
      let lightCount = 0;

      files.forEach(function (file) {
        if (/dark/.test(file.name)) {
          darkCount++;
        } else if (/light/.test(file.name)) {
          lightCount++;
        } else {
          unknownCount++;
        }
      });

      expect(darkCount).toBe(layoutCount * ('dark' in colors ? Math.floor(Object.keys(colors.dark).length / 4) : 0));
      expect(lightCount).toBe(layoutCount * ('light' in colors ? Math.floor(Object.keys(colors.light).length / 4) : 0));
      expect(unknownCount).toBe(0);
    }));
  };

  testColorSetConfiguration('should produce six files containing both schemes if passed both a dark and light theme', _themerColorsDefault.colors);
  testColorSetConfiguration('should produce three file containing only a dark scheme if passed only a dark color set', { dark: _themerColorsDefault.colors.dark });
  testColorSetConfiguration('should produce three file containing only a light scheme if passed only a light color set', { light: _themerColorsDefault.colors.light });
});